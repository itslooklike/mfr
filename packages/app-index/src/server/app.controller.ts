import React from 'react'
import serialize from 'serialize-javascript'
import { Controller, Dependencies, Get, Req, Res } from '@nestjs/common'
import { renderToString } from 'react-dom/server'
import { ServerStyleSheet } from 'styled-components'
import { minify } from 'html-minifier'
import type { Request, Response } from 'express'

import App, { TAppProps } from '../app/App'
import { WidgetsService } from './widgets/widgets.service'

@Controller()
@Dependencies(WidgetsService)
export class AppController {
  constructor(private widgetsService: WidgetsService) {}

  @Get('/')
  async renderIndexPage(@Req() req: Request, @Res() res: Response) {
    const { containerAssets } = global

    const widgetConfigs = [
      {
        name: 'header',
        params: {
          name: 'Morgan',
        },
      },
    ]

    const widgets = await this.widgetsService.getWidgets(widgetConfigs)

    const sheet = new ServerStyleSheet()

    const widgetsHtml: TAppProps = Object.keys(widgets).reduce((acc, key) => {
      return {
        ...acc,
        [`${key}Html`]: widgets[key]?.html || '',
      }
    }, {})

    const containerHtml = renderToString(sheet.collectStyles(React.createElement(App, widgetsHtml)))

    const persistMarkup = Object.keys(widgetsHtml).reduce(
      (acc, key) => ({ ...acc, [key]: serialize(widgetsHtml[key]) }),
      {}
    )

    const { css: widgetsCss, js: widgetsJs } = Object.keys(widgets).reduce(
      (acc, key) => {
        acc.css.add(widgets[key]?.linkCss)
        acc.js.add(widgets[key]?.linkJs)

        return acc
      },
      { css: new Set(), js: new Set() }
    )

    const html = `
    <!doctype html>
    <html lang="ru">
      <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <meta content="width=device-width, initial-scale=1" name="viewport" />
        <title>Demo page</title>
        ${sheet.getStyleTags()}
        ${containerAssets?.linkCss || ''}
        ${Array.from(widgetsCss).join('')}
        <div id="root">${containerHtml}</div>
        <script>window.WIDGETS=${JSON.stringify(persistMarkup)};</script>
        ${containerAssets?.linkJs || ''}
        ${Array.from(widgetsJs).join('')}
      </body>
    </html>`

    const miniHtml = minify(html, {
      collapseWhitespace: true,
      removeEmptyAttributes: false,
      includeAutoGeneratedTags: false,
    })

    res.send(miniHtml)

    sheet.seal()
  }
}
